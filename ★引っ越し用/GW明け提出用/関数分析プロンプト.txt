関数関係整理プロンプト

（依頼内容）
複数のPythonファイルに登場するすべての関数について、以下を整理し、表形式（CSVファイル）でまとめたうえで、関数間の関係をMermaid形式のフロー図で出力する。
さらに、関数の構造・種別が視覚的にわかるように色分け・枠分けも行う。

（出力内容）
CSVファイル
カラム名 / 説明
File / この関数が定義されているPythonファイル名
Function / 関数名
Called By / 本関数を呼び出している他の関数名（複数ある場合はカンマ区切り）
Internal Calls (Same File) / 本関数内で呼び出している同一ファイル内の自作関数（標準・外部ライブラリ関数除外）
Internal Calls (Other File) / 本関数内で呼び出している他ファイルの自作関数（標準・外部ライブラリ関数除外）
Arguments / 関数の引数（カンマ区切り）
Returns / ドキュメントコメント(docstring)から取得した返り値。なければ「不明」と記述

Mermaidフロー図
呼び出し元 → 呼び出し先への矢印を描画する
呼び出し先 → 呼び出し元にも矢印を返す（双方向描画）
関数内関数は親関数の枠内に入れて表現する
ファイル単位でsubgraphを作成し、関数を整理する
関数単位でもsubgraph（親関数と関数内関数のセット）を作成する

（色・デザインルール）
通常関数のノード
背景色：白 (#FFFFFF)
枠線色：青 (#0000FF)
関数内関数のノード
背景色：水色 (#B3E5FC)
枠線色：青 (#0000FF)
ファイル単位のサブグラフ（外枠）
hai
枠線色：ダークグリーン (#006400)
関数単位のサブグラフ（関数＋その関数内関数）
背景色なし
枠線色は通常関数と同じ青 (#0000FF) に統一

（作業ステップ）
①各ファイルをAST解析して関数情報（名前、引数、docstring、呼び出し関係）を抽出
②関数内関数を検出し、親子関係を整理
➂CSV形式で関数情報をまとめて保存（UTF-8エンコード）
④Mermaid形式で呼び出し関係をフロー図化
⑤関数と関数内関数を枠線・背景色で区別
⑥ファイル単位・関数単位のサブグラフに枠線スタイルを適用

（その他注意点）
・内部関数も正しく検出し、親関数の内部にまとめる
・標準ライブラリ関数や外部ライブラリ関数の呼び出しは対象外とする
・可能な限り関数間の呼び出し順（時系列の流れ）にノードを並べる
・Mermaidファイルはテキスト出力形式で保存する（.mmdファイル）

